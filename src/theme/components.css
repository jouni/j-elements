:where(html),
:host {
  font-family: var(--font-family);

  /* Set to auto to disable grayscale/antialiased font smoothing (and use default sub-pixel antialiasing) */
  -webkit-font-smoothing: var(--font-smoothing, antialiased);
  -moz-osx-font-smoothing: var(--font-smoothing, grayscale);

  cursor: default;

  /* We assume apps are built with responsive layouting in mind */
  -webkit-text-size-adjust: none;
  text-size-adjust: none;

  accent-color: var(--accent-ui);
}

:where(body) {
  font-size: var(--font-size-m);
  line-height: var(--line-height-m);
}

:where([theme~=light], [theme~=dark]) {
  color-scheme: light;
  background: var(--background);
  color: var(--color);
}

:where([theme~=dark]) {
  color-scheme: dark;
}

@media (prefers-color-scheme: dark) {
  html,
  :host {
    color-scheme: dark;
  }
}

/* Focus outline */

:focus:not(:focus-visible) {
  /* Support Windows High Contrast Mode */
  outline: 3px solid transparent;
}

:focus-visible {
  outline: 3px solid transparent;
  box-shadow:
    0 0 0 var(--outline-offset, 2px) var(--background),
    0 0 0 calc(var(--outline-width, 2px) + var(--outline-offset, 2px)) var(--outline-color, var(--border-color-accent));
}

/* Safari */
@supports not selector(:focus-visible) {
  :focus {
    outline: 3px solid transparent;
    box-shadow:
      0 0 0 var(--outline-offset, 2px) var(--background),
      0 0 0 calc(var(--outline-width, 2px) + var(--outline-offset, 2px)) var(--outline-color, var(--border-color-accent));
  }
}

/* Link/Anchor */

:where(a) {
  color: var(--link-color, var(--color-accent));
}

:where(a:visited) {
  color: var(--link-visited-color, var(--color-accent-high-contrast));
}

/* Text Input, Text Area, Select */

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select) {
  -webkit-appearance: none;
  -webkit-tap-highlight-color: transparent;
  background: var(--textinput-background, var(--background));
  border: var(--textinput-border, var(--border-ui));
  border-radius: var(--textinput-border-radius, var(--border-radius-m));
  font: var(--textinput-font, var(--font-textinput, inherit));
  color: var(--textinput-color, var(--color));
  padding: var(--textinput-padding, var(--size-8, 0.5rem));
  box-sizing: border-box;
  margin: 0;
  vertical-align: middle;
  transition: border 0.15s;
}

:where(textarea) {
  resize: vertical;
  /* TODO this assumes that --textinput-padding is always just a single value, and that --line-height-s-ps is used */
  min-height: calc(var(--textinput-padding, var(--size-8, 0.5rem)) * 2 + var(--line-height-s-px));
}

@media (any-hover: hover) {
  :where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):where(:not(:disabled):hover) {
    background: var(--textinput-hover-background, var(--textinput-background, var(--background)));
    border: var(--textinput-hover-border, var(--textinput-border, var(--border-ui-hover)));
  }
}

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):where(:not(:disabled):active) {
  background: var(--textinput-active-background, var(--textinput-background, var(--background)));
  border: var(--textinput-active-border, var(--textinput-border, var(--border-ui-active)));
}

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):where(:focus) {
  --outline-offset: -1px;
  border: var(--textinput-focus-border, var(--textinput-border, var(--border-ui-focus)));
  transition: none;
}

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):where(:disabled) {
  color: var(--textinput-disabled-color, var(--color-disabled));
  border: var(--textinput-disabled-border, 1px solid var(--border-color-low-contrast));
  background: var(--textinput-disabled-background, var(--background));
}

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):where([readonly]) {
  cursor: default;
}

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):where([readonly]:not(:focus)) {
  border: var(--textinput-readonly-border, 1px solid var(--border-color-low-contrast));
  background: var(--textinput-readonly-background, var(--background));
}

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea)::placeholder {
  color: var(--textinput-placeholder-color, var(--color-low-contrast));
}

/* TODO invalid fields which have not been edited should not be marked */
/* :where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):invalid {
  border: var(--textinput-invalid-border, 1px solid var(--red-500));
} */

:where(input:not([type=range], [type=radio], [type=checkbox], [type=button], [type=color], [type=file], [type=image], [type=reset], [type=submit]), textarea, select):where([theme~=small]) {
  --textinput-font: var(--font-textinput-small);
  padding: var(--textinput-small-padding, var(--size-6, 0.375rem));
}

/* Select */

:where(select) {
  --_padding-inline-end: var(--select-padding-inline-end, calc(var(--icon-size, 1.125em) + var(--size-8, 0.5rem) * 2));
  padding-inline-end: var(--_padding-inline-end);
  background-image: var(--select-background-image);
  background-repeat: no-repeat;
  background-size: var(--icon-size, 1.125em);
  background-position: right calc((var(--_padding-inline-end) - var(--icon-size, 1.125em)) / 2) center;
  background-blend-mode: var(--select-background-blend-mode, multiply);
  --select-background-image: var(--icon-chevron-down-gray);
}

@media (prefers-color-scheme: dark) {
  :where(select) {
    --select-background-blend-mode: screen;
  }
}

[theme~=dark] :where(select),
:where(select[theme~=dark]) {
  --select-background-blend-mode: screen;
}

[dir=rtl] :where(select),
[dir=rtl]:where(select),
:host([dir=rtl]) :where(select) {
  background-position-x: var(--select-background-position-x, var(--size-8, 0.5rem));
}

/* Date input */

:where(input[type^=date])::-webkit-datetime-edit-fields-wrapper {
  padding: 0;
}

:where(input[type^=date])::-webkit-calendar-picker-indicator {
  --mask-image: var(--icon-calendar);
  -webkit-mask-image: var(--mask-image);
  mask-image: var(--mask-image);
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  background: currentColor;
  width: 1em;
  height: 1em;
}

/* Search input */

:where(input[type=search])::-webkit-search-cancel-button {
  display: none;
}

/* Button */

:where(button) {
  -webkit-appearance: none;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--size-12, 0.75rem);
  background: var(--button-background, var(--background-ui));
  border: var(--button-border, 1px solid transparent); /* Should match with --textinput-border, so that the heights are equal */
  border-radius: var(--button-border-radius, var(--border-radius-m));
  color: var(--button-color, var(--color));
  font: var(--button-font, var(--font-button, inherit));
  padding: var(--button-padding, var(--size-8, 0.5rem) var(--size-16, 1rem));
  min-width: var(--button-min-width, var(--size-40, 2.5rem));
  min-height: var(--button-min-height, var(--size-40, 2.5rem));
  box-sizing: border-box;
  margin: 0;
  vertical-align: middle;
  touch-action: manipulation;
  transition: background 0.15s;
}

@media (any-hover: hover) {
  :where(button:not(:disabled):hover) {
    background: var(--button-hover-background, var(--button-background, var(--background-ui-hover)));
    border: var(--button-hover-border, var(--button-border, 1px solid transparent));
    color: var(--button-hover-color, var(--button-color, var(--color)));
  }

  :where(button:disabled:hover) {
    background: var(--button-background, var(--background-ui));
  }
}

:where(button:not(:disabled):is(:active, [active])) {
  background: var(--button-active-background, var(--button-background, var(--background-ui-active)));
  border: var(--button-active-border, var(--button-border, 1px solid transparent));
  color: var(--button-active-color, var(--button-color, var(--color)));
  transition: none;
}

:where(button:disabled) {
  --button-color: var(--button-disabled-color, var(--color-disabled));
  --button-background: var(--button-disabled-background, var(--background-ui));
  --button-border: var(--button-disabled-border, var(--button-border, 1px solid transparent));
}

:where(button[theme~=primary]) {
  --button-background: var(--button-primary-background, var(--background-accent));
  --button-hover-background: var(--button-primary-hover-background, var(--background-accent-hover));
  --button-active-background: var(--button-primary-active-background, var(--background-accent-active));
  --button-color: var(--button-primary-color, var(--background));
  --button-border: var(--button-primary-border, 1px solid transparent);
}

:where(button[theme~=tertiary]) {
  --button-background: var(--button-tertiary-background, transparent);
  --button-hover-background: var(--button-tertiary-hover-background, var(--background-ui));
  --button-active-background: var(--button-tertiary-active-background, var(--background-ui-hover));
  --button-color: var(--button-tertiary-color, var(--color-accent));
  --button-hover-color: var(--button-tertiary-hover-color, var(--color-accent-high-contrast));
  --button-active-color: var(--button-tertiary-active-color, var(--color));
  --button-border: var(--button-tertiary-border, 1px solid transparent);
}

:where(button[theme~=small]) {
  --button-font: var(--button-small-font, var(--font-button-small));
  --button-padding: var(--button-small-padding, var(--size-6, 0.375rem) var(--size-12, 0.75rem));
  --button-min-width: var(--size-32, 2rem);
  --button-min-height: var(--size-32, 2rem);
}

:where(button) icon {
  margin: 0 calc(var(--size-6, 0.375rem) * -1);
}

/* Checkbox & Radio Button*/

:where(input[type=checkbox], input[type=radio]) {
  -webkit-appearance: none;
  -webkit-tap-highlight-color: transparent;
  background: var(--optionbox-background, var(--background-ui));
  border: var(--optionbox-border, var(--border-ui));
  color: var(--optionbox-color, var(--color));
  width: var(--optionbox-size, 1rem);
  height: var(--optionbox-size, 1rem);
  font: inherit;
  border-radius: var(--optionbox-border-radius, var(--border-radius-s));
  margin: 0;
  vertical-align: middle;
  flex: none;
  transition: background-color 0.15s;
  --outline-offset: 2px;
  contain: strict;
}

@media (any-hover: hover) {
  :where(:is(input[type=checkbox], input[type=radio]):not(:disabled):hover) {
    background: var(--optionbox-hover-background, var(--background-ui-hover));
    border: var(--optionbox-hover-border, var(--optionbox-border, var(--border-ui-hover)));
    color: var(--optionbox-hover-color, var(--optionbox-color, var(--color)));
  }
}

:where(:is(input[type=checkbox], input[type=radio]):not(:disabled):active) {
  background: var(--optionbox-active-background, var(--background-ui-active));
  border: var(--optionbox-active-border, var(--optionbox-border, var(--border-ui-active)));
  color: var(--optionbox-active-color, var(--optionbox-color, var(--color)));
  transition: none;
}

:where(input[type=checkbox]:where(:checked, :indeterminate), input[type=radio]:checked) {
  background: var(--optionbox-checked-background, var(--background-accent));
  border: var(--optionbox-checked-border, var(--optionbox-border, 0));
  color: var(--optionbox-checked-color, var(--background));
}

@media (any-hover: hover) {
  :where(:is(input[type=checkbox], input[type=radio]):checked:not(:disabled):hover) {
    background: var(--optionbox-checked-hover-background, var(--background-accent-hover));
    border: var(--optionbox-checked-hover-border, var(--optionbox-checked-border, var(--optionbox-border, 0)));
    color: var(--optionbox-checked-hover-color, var(--optionbox-checked-color, var(--background)));
  }
}

:where(:is(input[type=checkbox], input[type=radio]):checked:not(:disabled):active) {
  background: var(--optionbox-checked-active-background, var(--background-accent-active));
  border: var(--optionbox-checked-active-border, var(--optionbox-checked-border, var(--optionbox-border, 0)));
  color: var(--optionbox-checked-active-color, var(--optionbox-checked-color, var(--background)));
}

:where(:is(input[type=checkbox], input[type=radio]):disabled) {
  background: var(--optionbox-disabled-background, var(--background-ui));
  border: var(--optionbox-disabled-border, var(--optionbox-border, 0));
  color: var(--optionbox-disabled-color, var(--color-low-contrast));
}

:where(input[type=checkbox]:is(:checked, :indeterminate), input[type=radio]:checked)::before {
  content: "";
  display: inline-block;
  width: 100%;
  height: 100%;
  vertical-align: top;
  background-color: currentColor;
  -webkit-mask-image: var(--mask-image);
  mask-image: var(--mask-image);
  --mask-image: var(--icon-checkmark-small);
}

:where(input[type=checkbox]:indeterminate)::before {
  --mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" /></svg>');
}

/* Radio Button */

:where(input[type=radio]) {
  border-radius: 50%;
}

:where(input[type=radio]:checked)::before {
  --mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><circle cx="10" cy="10" r="3"/></svg>');
}

@media (forced-colors: active) {
  :where(input[type=checkbox]) {
    -webkit-appearance: checkbox;
    appearance: checkbox;
  }

  :where(input[type=radio]) {
    -webkit-appearance: radio;
    appearance: radio;
  }
}

/* Field & Field Group */

:where(j-field, j-field-group) {
  display: flex;
  flex-direction: column;
  gap: var(--space-8, 0.5rem);
}

:where(j-field-group) {
  align-items: flex-start;
}

:where(j-field[inline]) {
  display: inline-flex;
}

:where(:is(j-field, j-field-group) label) {
  -webkit-tap-highlight-color: transparent;
}

:where(:is(j-field, j-field-group) label:first-child) {
  font: var(--font-field-label);
}

:where(:is(j-field, j-field-group):focus-within > label:first-child) {
  color: var(--color-accent);
}

:where(j-field[type=radio], j-field[type=checkbox], j-field-group label:not(:first-child)) {
  display: inline-grid;
  grid-template-columns: auto auto;
  align-items: center;
  column-gap: var(--size-8, 0.5rem);
  row-gap: var(--size-4, 0.25rem);
  vertical-align: middle;
}

:where(:is(j-field[type=radio], j-field[type=checkbox], j-field-group label:not(:first-child)) input:not(:first-child)) {
  grid-row: 1;
}

:where(:is(j-field[type=radio], j-field[type=checkbox], j-field-group label:not(:first-child))) :where(:not(input:first-child)) {
  grid-column: 1;
}

:where(j-field[type=radio], j-field[type=checkbox], j-field-group label:not(:first-child)) :where(input:not(:first-child), input:first-child ~ *) {
  grid-column: 2;
}

:where(:is(j-field, j-field-group) :is([description], [validation-message])) {
  font: var(--font-field-description);
  margin: 0;
  color: var(--color-low-contrast);
}

[required-indicator] {
  color: var(--color-low-contrast);
  margin: 0 0.25em;
}

[required-indicator]::before {
  content: var(--content-required-indicator, "*");
}

j-field-group j-field {
  --content-required-indicator: "";
}

[error-indicator] {
  content: var(--content-error-indicator, "");
  display: inline-block;
  vertical-align: text-top;
  width: 1em;
  height: 1em;
  margin: 0 0.25em;
  background: var(--color-error, var(--red-500));
  --mask-image: var(--icon-error);
  -webkit-mask-image: var(--mask-image);
  mask-image: var(--mask-image);
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  -webkit-mask-position: 50%;
  mask-position: 50%;
}

/* Slider */

:where(input[type=range]) {
  -webkit-appearance: none;
  background: transparent;
  width: calc(var(--size-16, 1rem) * 8);
  --outline-offset: 2px;
}

:where(input[type=range])::-webkit-slider-runnable-track {
  background: var(--slider-track-background, var(--background-ui));
  border-radius: var(--slider-track-border-radius, var(--border-radius-s));
  height: var(--slider-track-size, var(--size-4, 0.25rem));
  transition: background-color 0.15s;
}

:where(input[type=range])::-moz-range-track {
  background: var(--slider-track-background, var(--background-ui));
  border-radius: var(--slider-track-border-radius, var(--border-radius-s));
  height: var(--slider-track-size, var(--size-4, 0.25rem));
  transition: background-color 0.15s;
}

:where(input[type=range]:not(:disabled)):where(:hover, :focus)::-webkit-slider-runnable-track {
  background: var(--slider-track-hover-background, var(--background-ui-hover));
}

:where(input[type=range]:not(:disabled)):where(:hover, :focus)::-moz-range-track {
  background: var(--slider-track-hover-background, var(--background-ui-hover));
}

:where(input[type=range])::-webkit-slider-thumb {
  -webkit-appearance: none;
  margin-top: calc((var(--slider-thumb-size, var(--size-16, 1rem)) - var(--slider-track-size, var(--size-4, 0.25rem))) / -2);
  background: var(--slider-thumb-background, var(--background-accent));
  height: var(--slider-thumb-size, var(--size-16, 1rem));
  width: var(--slider-thumb-size, var(--size-16, 1rem));
  border-radius: var(--slider-thumb-border-radius, 50%);
  border: 0;
  transition: background-color 0.15s;
}

:where(input[type=range])::-moz-range-thumb {
  margin-top: calc((var(--slider-thumb-size, var(--size-16, 1rem)) - var(--slider-track-size, var(--size-4, 0.25rem))) / -2);
  background: var(--slider-thumb-background, var(--background-accent));
  height: var(--slider-thumb-size, var(--size-16, 1rem));
  width: var(--slider-thumb-size, var(--size-16, 1rem));
  border-radius: var(--slider-thumb-border-radius, 50%);
  border: 0;
  transition: background-color 0.15s;
}

:where(input[type=range]:not(:disabled))::-webkit-slider-thumb:hover {
  background: var(--slider-thumb-hover-background, var(--background-accent-hover));
}

:where(input[type=range]:not(:disabled))::-moz-range-thumb:hover {
  background: var(--slider-thumb-hover-background, var(--background-accent-hover));
}

:where(input[type=range]:not(:disabled))::-webkit-slider-thumb:active {
  background: var(--slider-thumb-active-background, var(--background-accent-active));
  transition: none;
}

:where(input[type=range]:not(:disabled))::-moz-range-thumb:active {
  background: var(--slider-thumb-active-background, var(--background-accent-active));
  transition: none;
}

:where(input[type=range]:is(:focus, :focus-visible)) {
  box-shadow: none !important;
}

input[type=range]:focus-visible::-webkit-slider-thumb {
  outline: none;
  box-shadow:
    0 0 0 var(--outline-offset, 2px) var(--background),
    0 0 0 calc(var(--outline-width, 2px) + var(--outline-offset, 2px)) var(--outline-color, var(--border-color-accent));
}

input[type=range]:focus-visible::-moz-range-thumb {
  outline: none;
  box-shadow:
    0 0 0 var(--outline-offset, 2px) var(--background),
    0 0 0 calc(var(--outline-width, 2px) + var(--outline-offset, 2px)) var(--outline-color, var(--border-color-accent));
}

/* Safari */
@supports not selector(:focus-visible) {
  input[type=range]:focus::-webkit-slider-thumb {
    outline: none;
    box-shadow:
      0 0 0 var(--outline-offset, 2px) var(--background),
      0 0 0 calc(var(--outline-width, 2px) + var(--outline-offset, 2px)) var(--outline-color, var(--border-color-accent));
  }
}

:where(input[type=range]:disabled) {
  --slider-thumb-background: var(--background-ui-active);
}

@media (forced-colors: active) {
  :where(input[type=range]) {
    outline: 1px solid;
  }

  :where(input[type=range])::-webkit-slider-thumb {
    -webkit-appearance: sliderthumb-horizontal;
  }
}

/* Menu */
:where(button[role=menuitem]) {
  justify-content: start;
  text-align: start;
}

:where(button[role=menuitem]:not(:active:not(:disabled), :hover:not(:disabled))) {
  --button-background: transparent;
  --button-hover-background: transparent;
  --button-active-background: transparent;
}

/* Overflow menu */

/* Needed for Safari (Tech Preview) */
:where(j-overflow-menu):focus {
  box-shadow: none;
}

:where(j-overflow-menu) {
  gap: var(--size-4, 0.25rem);
}

::part(popup) {
  background: var(--background-above);
  /* TODO create shadow tokens */
  box-shadow: 0 4px 16px -2px rgba(0,0,0,0.2);
  padding: var(--size-8, 0.5rem);
  border-radius: var(--border-radius-l);
  color: var(--color);
  /* For forced color mode */
  outline: 2px solid transparent;
}

/* Details */

:where(details, summary) {
  /* Can't inherit because of Chrome's implementation, slot element in between */
  border-radius: var(--border-radius-l);
}

:where(summary) {
  font-weight: var(--font-weight-strong);
  color: var(--color);
  padding: var(--size-8, 0.5rem) 0;
  transition: color 0.15s;
  display: flex;
  align-items: center;
  gap: var(--size-4, 0.25rem);
}

@media (any-hover: hover) {
  :where(details:not([disabled])) > :where(summary:hover) {
    color: var(--color-high-contrast);
  }
}

:where(summary)::-webkit-details-marker {
  display: none;
}

:where(summary)::marker {
  content: "";
}

:where(summary) > * {
  flex: 1;
}

:where(summary)::before {
  /* Styles duplicated from <icon> */
  display: inline-block;
  vertical-align: baseline;
  width: var(--icon-size, 1.125em);
  height: var(--icon-size, 1.125em);
  overflow: hidden;
  -webkit-mask-image: var(--mask-image);
  mask-image: var(--mask-image);
  background-color: currentColor;
  flex: none;
  margin-top: calc((var(--icon-size, 1.125em) - 1em) * -1.75);
  margin-bottom: calc((var(--icon-size, 1.125em) - 1em) * -1.75);
  -webkit-user-select: none;
  user-select: none;
  /* End of duplicated styles */
  content: "";
  --mask-image: var(--icon-chevron-down);
  transition: 0.15s;
  transition-property: transform, color;
}

:where(details:not([open])) :where(summary)::before {
  transform: rotate(-90deg);
}

@media (forced-colors: active) {
  :where(summary)::before {
    background: ButtonText;
  }
}

[dir=rtl] :where(details:not([open])) :where(summary)::before,
[dir=rtl]:where(details:not([open])) :where(summary)::before,
:host([dir=rtl]) :where(details:not([open])) :where(summary)::before {
  transform: rotate(90deg);
}

:where(details[theme~=filled]) {
  background: var(--background-ui);
  padding: var(--size-16, 1rem);
}

:where(details[theme~=filled]) :where(summary) {
  margin: calc(var(--size-16, 1rem) * -1);
  padding-inline: var(--size-8, 0.5rem);
}

:where(details[theme~=filled][open]) :where(summary) {
  margin-bottom: 0;
}

:where(details[theme~=reverse][theme~=filled]) :where(summary) {
  padding-inline-start: var(--size-16, 1rem);
}

:where(details[theme~=reverse]) :where(summary)::before {
  order: 1;
  margin-inline-start: auto;
}

:where(details) :where(summary[tabindex="-1"]) {
  pointer-events: none;
}

html {
  --avatar-background-color: var(--background-ui);
  --avatar-color: var(--color);
}

j-avatar-group::part(popup) {
  gap: var(--size-12, 0.75rem);
}

/* These should be kept in sync with j-avatar styles */
j-avatar-group :where([slot="overflow-button"]) {
  border-radius: var(--avatar-border-radius, 50%);
  width: var(--avatar-size, 2.5rem);
  height: var(--avatar-size, 2.5rem);
  background-color: var(--avatar-background-color, #ddd);
  color: var(--avatar-color, inherit);
  border: var(--avatar-border-width, 2px) solid var(--avatar-border-color, transparent);
  padding: 0;
  font: inherit;
}

:where(j-tooltip) {
  animation: fade-in .2s 1s both;
  background-color: var(--background-ui);
  color: var(--color);
  box-shadow: 0 4px 16px -2px rgba(0,0,0,0.2);
  padding: var(--size-4, 0.25rem);
  margin: var(--size-4, 0.25rem);
  font-size: var(--font-size-s);
  border-radius: var(--border-radius-s);
  /* TODO this feels correct, but accessibility guidelines perhaps advocate against this (i.e., tooltips should be selectable) */
  pointer-events: none;
}

@keyframes fade-in {
  0% {
    opacity: 0;
  }
}

:where(j-menu) {
  --divider-margin: var(--size-8, 0.5rem) var(--size-4, 0.25rem);
  --divider-color: var(--border-color-low-contrast);
}

:where(j-overflow-menu) {
  --divider-margin: var(--size-8, 0.5rem) var(--size-4, 0.25rem);
  --divider-color: var(--border-color-low-contrast);
}
