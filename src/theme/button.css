:is(button, .button) {
  appearance: none;
  border-radius: var(--button-border-radius, var(--border-radius-m));
  border: var(--button-border, var(--border-ui)); /* Should match --textinput-border so that their heights are equal */
  --bg: var(--gradient-a25) var(--surface-a50) border-box var(--surface-background-clip);
  background: var(--button-bg, var(--bg));
  font: var(--button-font, var(--font-button, inherit));
  text-decoration: none;
  color: var(--button-color, var(--color-high-contrast));
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: middle;
  gap: var(--space-50);
  padding: var(--button-padding, calc(var(--space-50) - var(--border-width)) calc(var(--space-75) - var(--border-width)));
  box-shadow: var(--button-box-shadow, 0 2px 2px -1px oklch(0 0 0 / var(--c50)));
  transition: filter var(--transition-duration-fast);
  -webkit-tap-highlight-color: transparent;
  -webkit-user-select: none;
  user-select: none;
  touch-action: manipulation;
  contain: content;
  --outline-offset: -1px;
  /* The filter property triggers a positioning context in Chrome at least, so better to force that here already */
  position: relative;
}

:is(button, .button).primary {
  --bg: var(--gradient) var(--accent) border-box;
  color: var(--button-fg, var(--accent-fg));
  outline-offset: 2px;
  box-shadow: var(--button-box-shadow, 0 2px 2px -1px oklch(0 0 0 / var(--c200)));
}

:is(button, .button).tertiary {
  --bg: transparent;
  border: 0;
  box-shadow: var(--button-box-shadow, none);
}

:is(button, .button) icon {
  margin: 0 calc(var(--space-25) * -1);
}

:is(button, .button).small {
  font-size: var(--font-size-s);
  line-height: var(--line-height-xs);
}

:is(button, .button).xsmall {
  font-size: var(--font-size-xs);
  line-height: var(--line-height-xxs);
  padding: calc(var(--space-25)) calc(var(--space-50));
}

:is(button, .button):not(:disabled, [aria-disabled=true]):is(:hover, :active) {
  /* These make sure transparent buttons apply the filter property as expected */
  -webkit-backdrop-filter: contrast(1);
  backdrop-filter: contrast(1);
}

@media (any-hover: hover) {
  :is(button, .button):not(:disabled, [aria-disabled=true]):hover {
    --b: clamp(0.93, (0.95 - var(--bg-l)) * 1000, 1.1);
    filter: var(--button-bg-hover,
      contrast(min(0.8 + var(--bg-l) / 3, var(--b)))
      saturate(1.15)
    );
    background: var(--button-bg-hover, var(--button-bg, var(--bg)));
  }

  :is(button, .button):not(:disabled, [aria-disabled=true]).filled:hover {
    --b: clamp(0.93, (0.95 - var(--accent-l)) * 1000, 1.1);
    filter: var(--button-bg-hover,
      contrast(clamp(
        0.8 + (sin(var(--accent-l) * 0.5 * pi)) * 0.2,
        (1.0001 - var(--b)) * 10000,
        1
      ))
      brightness(
        clamp(
          var(--b) + (cos(var(--accent-h) * 1deg) - 1) * (1 - var(--b)) * max(0, var(--accent-c)),
          (var(--b) - 1) * 1000,
          var(--b) + (cos(var(--accent-h) * 1deg) + 1) * (var(--b) - 1) * max(0, var(--accent-c) * 0)
        )
      )
    );
  }
}

:is(button, .button):not(:disabled, [aria-disabled=true]):is(:active, [aria-expanded=true]) {
  box-shadow: var(--button-box-shadow, 0 2px 2px -1px transparent);
  --b: 0.9;
  filter: var(--button-bg-hover,
      contrast(min(0.8 + var(--bg-l) / 3, 0.98))
      brightness(min(var(--b) + var(--bg-l) / 3, 0.94)) saturate(1.15)
    );
  transition: none;
  background: var(--button-bg-active, var(--button-bg, var(--bg)));
}

:is(button, .button):not(:disabled, [aria-disabled=true]).filled:is(:active, [aria-expanded=true]) {
  --b: 0.88;
}

:is(button, .button):is(:disabled, [aria-disabled=true]) {
  opacity: 0.5;
  cursor: default;
  box-shadow: var(--button-box-shadow, none);
}
