---
title: JElements
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }} | JElements</title>
    <link rel="stylesheet" href="{{ '/docs/src/styles/global.css' | url }}">
    <link rel="stylesheet" href="{{ '/docs/src/styles/prism-one-light.css' | url }}" media="(prefers-color-scheme: light)" id="prism-light">
    <link rel="stylesheet" href="{{ '/docs/src/styles/prism-one-dark.css' | url }}" media="(prefers-color-scheme: dark)" id="prism-dark">

    {# <link rel="stylesheet" href="{{ '/src/theme/colors.css' | url }}"> #}
    <link rel="stylesheet" href="{{ '/src/theme/tokens.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/body.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/icons.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/tooltip.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/popup.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/button.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/optionbox.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/textinput.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/slider.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/details.css' | url }}">
    {# TODO remove components.css #}
    <link rel="stylesheet" href="{{ '/src/theme/components.css' | url }}">

    <script type="module" src="{{ '/docs/src/components/module-size.js' | url }}"></script>
    <script type="module" src="{{ '/docs/src/components/table-of-contents.js' | url }}"></script>
    <script type="module" src="{{ '/docs/src/components/render-example.js' | url }}"></script>
    <script type="module" src="{{ '/docs/src/components/render-props.js' | url }}"></script>

    <script type="module" src="{{ '/src/components/Select.js' | url }}"></script>
    <script type="module" src="{{ '/src/components/Field.js' | url }}"></script>
    <script type="module" src="{{ '/src/components/Tooltip.js' | url }}"></script>

    <script type="module">
      const imports = `{{ imports }}`.split(/\s/g).map(str => str.trim()).filter(s => s);
      imports.forEach(url => {
        if (url.endsWith('.js')) {
          import(url);
        } else if (url.endsWith('.css') && !document.querySelector(`link[href="${url}"]`)) {
          const link = document.createElement('link');
          link.rel = 'stylesheet';
          link.href = url;
          document.head.appendChild(link);
        }
      });

      // Enable :active styles on touch devices (mainly iOS)
      document.addEventListener('touchstart', () => {});
    </script>
  </head>
  <body>
    <header class="main-nav">
      <a href="/" class="home"><span>J</span>Elements</a>

      <div class="prefs">
        <j-select aria-label="Select theme" id="theme">
          <button slot="trigger" class="tertiary">Theme</button>
          <div role="option" value="" aria-selected="true">
            <icon computer></icon> <span>System</span>
          </div>
          <div role="option" value="light">
            <icon sun></icon> <span>Light</span>
          </div>
          <div role="option" value="dark">
            <icon moon></icon> <span>Dark</span>
          </div>
          <div role="option" value="custom">
            <icon moon></icon>
            <input type="range" min="0" max="1" value="0.96" step="0.01" id="bg-l">
            <icon sun></icon>
          </div>
          <hr>
          <label for="vibrancy">Vibrancy</label><input type="range" min="0" max="100" value="0" id="vibrancy">
          <label for="accent-h">Hue</label><input type="range" min="0" max="360" value="0" id="accent-h">
        </j-select>
      </div>

      <script>
        const lightness = document.querySelector('#bg-l');
        const theme = localStorage.getItem('theme')?.trim();

        const lightSheet = document.querySelector('#prism-light');
        const darkSheet = document.querySelector('#prism-dark');

        const themeSelect = document.querySelector('#theme');
        const darkMedia = matchMedia('(prefers-color-scheme: dark)');

        updateTheme(theme);

        themeSelect.addEventListener('change', (e) => {
          if (e.target == themeSelect) {
            updateTheme(e.detail.value);
          }
        });

        function updateTheme(theme) {
          if (theme === undefined) {
            theme = '';
          } else if (theme != 'light' && theme != 'dark' && theme != 'custom' && theme !== '') {
            lightness.value = parseFloat(theme);
            theme = 'custom';
          }
          document.documentElement.style.removeProperty('--bg-l');
          if (theme == 'custom') {
            document.documentElement.style.setProperty('--bg-l', lightness.value);
            localStorage.setItem('theme', lightness.value);
            document.documentElement.setAttribute('theme', lightness.value >= 0.67 ? 'light' : 'dark');
          } else {
            document.documentElement.setAttribute('theme', theme);
            localStorage.setItem('theme', theme);
            lightness.value = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--bg-l'));
          }
          updateThemeSelect(theme);
          togglePrismTheme(lightness.value >= 0.67 ? 'light' : 'dark');

          document.querySelectorAll('render-props').forEach(rp => rp.updatePreviews());
        }

        function togglePrismTheme(theme) {
          lightSheet.toggleAttribute('disabled', theme === 'dark');
          darkSheet.toggleAttribute('disabled', theme === 'light');
          lightSheet.media = theme ? '' : '(prefers-color-scheme: light)';
          darkSheet.media = theme ? '' : '(prefers-color-scheme: dark)';
        }

        lightness.oninput = () => {
          updateTheme(lightness.value);
        }

        lightness.onclick = (e) => e.stopPropagation();

        function updateThemeSelect(theme) {
          document.querySelectorAll('#theme [role="option"]').forEach(option => {
            option.removeAttribute('selected');
            option.removeAttribute('aria-selected');
          });
          const selected = document.querySelector(`#theme [role="option"][value="${theme}"]`)
          selected?.setAttribute('selected', '');
          selected?.setAttribute('aria-selected', 'true');
        }

        const vibrancy = document.querySelector('#vibrancy');
        const v = parseFloat(localStorage.getItem('vibrancy')?.trim()) ||Â 0;
        vibrancy.oninput = updateVibrancy;
        vibrancy.value = v;
        updateVibrancy();

        function updateVibrancy() {
          document.documentElement.style.setProperty('--vibrancy', vibrancy.value);
          localStorage.setItem('vibrancy', vibrancy.value);
        }

        const accentH = document.querySelector('#accent-h');
        const hue = parseInt(localStorage.getItem('accent-h')?.trim()) || 220;
        accentH.oninput = updateAccentH;
        accentH.value = hue;
        updateAccentH();

        function updateAccentH() {
          document.documentElement.style.setProperty('--accent-h', accentH.value);
          localStorage.setItem('accent-h', accentH.value);
        }
      </script>
      <details theme="reverse"><summary>Menu</summary></details>
      <nav>
        {{ collections.all | eleventyNavigation | eleventyNavigationToHtml({activeKey: eleventyNavigation.key, activeListItemClass: "active", listItemHasChildrenClass: "has-children"}) | safe }}
      </nav>
    </header>
      <main>
        <h1><span>{{ eleventyNavigation.parent }}</span> <span class="sr-only">/</span> {{ title }}</h1>
        <table-of-contents></table-of-contents>
        {% if imports %}
        <module-size modules="{{ imports }}"></module-size>
        {% endif %}
        {{ content | safe }}
        <footer>
          <p>Everything licensed under Apache 2.0</p>
          <a href="https://github.com/jouni/j-elements">
            View on GitHub
          </a>
        </footer>
      </main>
  </body>
</html>
