---
title: JElements
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }} | JElements</title>
    <link rel="stylesheet" href="{{ '/docs/src/styles/global.css' | url }}">
    <link rel="stylesheet" href="{{ '/docs/src/styles/prism-one-light.css' | url }}" media="(prefers-color-scheme: light)" id="prism-light">
    <link rel="stylesheet" href="{{ '/docs/src/styles/prism-one-dark.css' | url }}" media="(prefers-color-scheme: dark)" id="prism-dark">

    <link rel="stylesheet" href="{{ '/src/theme/colors.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/tokens.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/components.css' | url }}">
    <link rel="stylesheet" href="{{ '/src/theme/icons.css' | url }}">

    <link rel="stylesheet" href="{{ '/src/theme/zinc.css' | url }}" class="accent-color zinc" disabled>
    <link rel="stylesheet" href="{{ '/src/theme/orange.css' | url }}" class="accent-color orange" disabled>
    <link rel="stylesheet" href="{{ '/src/theme/sky.css' | url }}" class="accent-color sky" disabled>
    <link rel="stylesheet" href="{{ '/src/theme/emerald.css' | url }}" class="accent-color emerald" disabled>

    <script type="module" src="{{ '/docs/src/components/module-size.js' | url }}"></script>
    <script type="module" src="{{ '/docs/src/components/table-of-contents.js' | url }}"></script>
    <script type="module" src="{{ '/docs/src/components/render-example.js' | url }}"></script>
    <script type="module" src="{{ '/docs/src/components/render-props.js' | url }}"></script>

    <script type="module" src="{{ '/src/components/Select.js' | url }}"></script>
    <script type="module" src="{{ '/src/components/Tooltip.js' | url }}"></script>

    <script type="module">
      const imports = `{{ imports }}`.split(/\s/g).map(str => str.trim()).filter(s => s);
      imports.forEach(url => {
        if (url.endsWith('.js')) {
          import(url);
        } else if (url.endsWith('.css') && !document.querySelector(`link[href="${url}"]`)) {
          const link = document.createElement('link');
          link.rel = 'stylesheet';
          link.href = url;
          document.head.appendChild(link);
        }
      });

      // Enable :active styles on touch devices (mainly iOS)
      document.addEventListener('touchstart', () => {});
    </script>
  </head>
  <body>
    <header class="main-nav">
      <h1><a href="/">JElements</a></h1>

      <div class="prefs">
        <j-select aria-label="Select accent color" id="accent-color">
          <button slot="trigger" theme="small ghost"></button>
          <div role="option" value="" aria-selected="true">
            <span>Indigo</span>
          </div>
          <div role="option" value="zinc">
            <span>Zinc</span>
          </div>
          <div role="option" value="emerald">
            <span>Emerald</span>
          </div>
          <div role="option" value="sky">
            <span>Sky</span>
          </div>
          <div role="option" value="orange">
            <span>Orange</span>
          </div>
        </j-select>

        <j-select aria-label="Select theme" id="theme">
          <button slot="trigger" theme="small ghost"></button>
          <div role="option" value="" aria-selected="true">
            <icon computer></icon> <span>System</span>
          </div>
          <div role="option" value="light">
            <icon sun></icon> <span>Light</span>
          </div>
          <div role="option" value="dark">
            <icon moon></icon> <span>Dark</span>
          </div>
        </j-select>
      </div>

      <script>
        const theme = localStorage.getItem('theme')?.trim();
        if (theme !== undefined) {
          document.documentElement.setAttribute('theme', theme);
          document.querySelectorAll('#theme [role=option]').forEach(option => {
            if (option.getAttribute('value') == theme) {
              option.setAttribute('aria-selected', 'true');
            } else {
              option.removeAttribute('aria-selected');
            }
          });
        }

        document.querySelector('#theme').addEventListener('change', (e) => {
          const theme = e.detail.value;
          document.documentElement.setAttribute('theme', theme);
          togglePrismTheme(theme);
          localStorage.setItem('theme', theme);
        });

        const lightSheet = document.querySelector('#prism-light');
        const darkSheet = document.querySelector('#prism-dark');
        togglePrismTheme(theme);

        function togglePrismTheme(theme) {
          lightSheet.toggleAttribute('disabled', theme === 'dark');
          darkSheet.toggleAttribute('disabled', theme === 'light');
          lightSheet.media = theme ? '' : '(prefers-color-scheme: light)';
          darkSheet.media = theme ? '' : '(prefers-color-scheme: dark)';
        }


        document.querySelectorAll('link.accent-color').forEach(link => link.disabled = true);
        const accentColor = localStorage.getItem('accent-color')?.trim();
        if (accentColor !== undefined) {
          if (accentColor) {
            document.querySelector(`link.accent-color.${accentColor}`).disabled = false;
          }
          document.querySelectorAll('#accent-color [role=option]').forEach(option => {
            if (option.getAttribute('value') == accentColor) {
              option.setAttribute('aria-selected', 'true');
            } else {
              option.removeAttribute('aria-selected');
            }
          });
        }

        document.querySelector('#accent-color').addEventListener('change', (e) => {
          document.querySelectorAll('link.accent-color').forEach(link => link.disabled = true);
          const accentColor = e.detail.value;
          if (accentColor) {
            document.querySelector(`link.accent-color.${accentColor}`).disabled = false;
          }
          localStorage.setItem('accent-color', accentColor);
        });
      </script>
      <details theme="reverse"><summary>Menu</summary></details>
      <nav>
        {{ collections.all | eleventyNavigation | eleventyNavigationToHtml({activeKey: eleventyNavigation.key, activeListItemClass: "active", listItemHasChildrenClass: "has-children"}) | safe }}
      </nav>
    </header>
      <main>
        <h1>{{ title }}</h1>
        <table-of-contents></table-of-contents>
        {% if imports %}
        <module-size modules="{{ imports }}"></module-size>
        {% endif %}
        {{ content | safe }}
        <footer>
          <p>Everything licensed under Apache 2.0</p>
          <a href="https://github.com/jouni/j-elements">
            View on GitHub
          </a>
        </footer>
      </main>
  </body>
</html>
